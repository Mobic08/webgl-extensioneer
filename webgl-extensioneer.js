// Generated by CoffeeScript 1.3.3
(function() {
  'Copyright (c) 2012, Florian Boesch <pyalot@gmail.com> http://codeflow.org/\n\nWebGL Extensioneer is licensed under any of the following licenses at your choosing:\n\nMIT: see mit-license\nGPL: see gpl-license\nBSD: see bsd-license';

  var getExtension, registry;

  registry = {
    ratified: [],
    approved: ['OES_texture_float', 'OES_texture_half_float', 'OES_standard_derivatives', 'WEBGL_debug_renderer_info', 'WEBGL_debug_shaders', 'EXT_texture_filter_anisotropic'],
    draft: ['WEBGL_lose_context', 'OES_vertex_array_object', 'WEBGL_compressed_texture_s3tc', 'WEBGL_depth_texture', 'OES_element_index_uint']
  };

  getExtension = WebGLRenderingContext.prototype.getExtension;

  WebGLRenderingContext.prototype.getExtension = function(name, _arg) {
    var approved, draft, index, is_approved, is_draft, is_ratified, ratified, supported, _i, _len, _ref, _ref1;
    _ref = _arg != null ? _arg : {}, ratified = _ref.ratified, approved = _ref.approved, draft = _ref.draft;
    if (ratified == null) {
      ratified = true;
    }
    if (approved == null) {
      approved = true;
    }
    if (draft == null) {
      draft = false;
    }
    _ref1 = this.getSupportedExtensions();
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      supported = _ref1[_i];
      index = supported.indexOf(name);
      if (index >= 0) {
        break;
      }
    }
    if (index === -1) {
      return null;
    }
    is_ratified = registry.ratified.indexOf(name) >= 0;
    is_approved = registry.approved.indexOf(name) >= 0;
    is_draft = registry.draft.indexOf(name) >= 0;
    if (is_ratified && ratified) {
      return getExtension.call(this, supported);
    } else if (is_approved && approved) {
      return getExtension.call(this, supported);
    } else if (is_draft && draft) {
      return getExtension.call(this, supported);
    } else {
      return null;
    }
  };

}).call(this);
